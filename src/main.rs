mod sf;
use crossterm::{
    execute,
    terminal::{Clear, ClearType},
};
use sf::sudoku::Sudoku;
use std::{io, io::stdout, time::Instant};

fn main() {
    /* let _a = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
    ];
    let _b = [
        [0, 7, 9, 1, 3, 2, 0, 8, 5],
        [0, 6, 0, 5, 9, 0, 7, 0, 0],
        [5, 0, 8, 7, 0, 0, 2, 1, 0],
        [0, 0, 0, 8, 0, 0, 9, 0, 0],
        [7, 0, 6, 3, 4, 0, 0, 0, 0],
        [8, 0, 1, 0, 0, 6, 4, 0, 3],
        [0, 8, 7, 0, 0, 0, 3, 0, 0],
        [9, 0, 3, 0, 0, 0, 5, 0, 8],
        [2, 5, 0, 0, 0, 0, 1, 9, 0],
    ];
    let _b_end = [
        [4, 7, 9, 1, 3, 2, 6, 8, 5],
        [1, 6, 2, 5, 9, 8, 7, 3, 4],
        [5, 3, 8, 7, 6, 4, 2, 1, 9],
        [3, 4, 5, 8, 7, 1, 9, 2, 6],
        [7, 2, 6, 3, 4, 9, 8, 5, 1],
        [8, 9, 1, 2, 5, 6, 4, 7, 3],
        [6, 8, 7, 9, 1, 5, 3, 4, 2],
        [9, 1, 3, 4, 2, 7, 5, 6, 8],
        [2, 5, 4, 6, 8, 3, 1, 9, 7],
    ];

    let _c = [
        [0, 0, 0, 0, 0, 3, 0, 6, 0],
        [0, 8, 0, 0, 5, 0, 7, 0, 0],
        [0, 1, 5, 0, 8, 0, 0, 4, 0],
        [8, 0, 0, 3, 0, 0, 0, 0, 9],
        [3, 4, 9, 0, 0, 6, 0, 0, 0],
        [2, 0, 6, 0, 9, 0, 3, 7, 0],
        [0, 0, 0, 4, 0, 0, 5, 0, 6],
        [7, 0, 0, 0, 0, 8, 0, 0, 2],
        [0, 9, 0, 0, 0, 0, 4, 3, 0],
    ];
    let _c1 = [
        [0, 2, 7, 0, 0, 3, 0, 6, 0],
        [0, 8, 3, 0, 5, 0, 7, 0, 1],
        [0, 1, 5, 0, 8, 0, 0, 4, 3],
        [8, 7, 1, 3, 0, 0, 0, 0, 9],
        [3, 4, 9, 0, 0, 6, 0, 0, 0],
        [2, 5, 6, 0, 9, 0, 3, 7, 0],
        [1, 3, 0, 4, 0, 0, 5, 0, 6],
        [7, 6, 4, 0, 0, 8, 0, 0, 2],
        [5, 9, 0, 0, 0, 0, 4, 3, 0],
    ];
    let _d = [
        [0, 0, 0, 5, 0, 1, 0, 7, 0],
        [0, 0, 7, 6, 4, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 4, 9],
        [1, 0, 0, 7, 0, 0, 0, 8, 0],
        [7, 4, 5, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 9, 0, 1, 0, 0],
        [3, 0, 0, 9, 0, 0, 0, 0, 0],
        [4, 2, 0, 0, 8, 5, 0, 0, 0],
        [5, 0, 1, 0, 7, 4, 0, 0, 8],
    ];
    let _d_end = [
        [9, 8, 4, 5, 3, 1, 6, 7, 2],
        [2, 5, 7, 6, 4, 9, 8, 3, 1],
        [6, 1, 3, 8, 2, 7, 5, 4, 9],
        [1, 9, 6, 7, 5, 3, 2, 8, 4],
        [7, 4, 5, 2, 1, 8, 3, 9, 6],
        [8, 3, 2, 4, 9, 6, 1, 5, 7],
        [3, 7, 8, 9, 6, 2, 4, 1, 5],
        [4, 2, 9, 1, 8, 5, 7, 6, 3],
        [5, 6, 1, 3, 7, 4, 9, 2, 8],
    ];

    let _e = [
        [0, 0, 0, 1, 2, 0, 0, 0, 9],
        [2, 0, 9, 0, 0, 7, 4, 0, 0],
        [7, 3, 4, 0, 0, 9, 2, 0, 5],
        [0, 0, 0, 2, 0, 0, 0, 0, 0],
        [4, 2, 0, 7, 0, 0, 9, 6, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0],
        [8, 0, 3, 9, 0, 0, 0, 5, 0],
        [0, 9, 7, 3, 0, 0, 6, 0, 0],
        [0, 4, 0, 0, 0, 0, 0, 0, 0],
    ];

    let _e_str = "...12...92.9..74..734..92.5...2.....42.7..96......1...8.39...5..973..6...4......."

    //此速度用dfs算法要950ms，本算法只需要7ms，因为没调用本算法的dfs部分
    let _f = [
        [3, 0, 0, 0, 0, 8, 0, 0, 9],
        [7, 0, 0, 5, 0, 0, 0, 2, 0],
        [0, 0, 8, 0, 0, 0, 0, 0, 0],
        [0, 4, 6, 0, 0, 0, 0, 0, 0],
        [2, 0, 0, 1, 0, 0, 0, 3, 0],
        [0, 0, 3, 8, 0, 0, 4, 0, 0],
        [8, 0, 0, 0, 0, 7, 0, 5, 0],
        [0, 0, 0, 0, 8, 6, 0, 4, 0],
        [6, 7, 0, 0, 0, 9, 2, 0, 1],
    ];

    let _f_str =
        "3....8..97..5...2...8.......46......2..1...3...38..4..8....7.5.....86.4.67...92.1"
            .to_string();

    let _g = [
        [0, 0, 4, 0, 0, 9, 0, 5, 0],
        [7, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 8, 2, 0, 0, 7, 0, 9],
        [6, 0, 0, 0, 0, 4, 9, 0, 8],
        [0, 4, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 5],
        [0, 0, 2, 0, 3, 0, 0, 0, 0],
        [8, 0, 0, 0, 0, 1, 6, 0, 4],
        [0, 0, 0, 0, 0, 0, 0, 7, 0],
    ];

    let _h = [
        [8, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 6, 0, 0, 0, 0, 0],
        [0, 7, 0, 0, 9, 0, 2, 0, 0],
        [0, 5, 0, 0, 0, 7, 0, 0, 0],
        [0, 0, 0, 0, 4, 5, 7, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 3, 0],
        [0, 0, 1, 0, 0, 0, 0, 6, 8],
        [0, 0, 8, 5, 0, 0, 0, 1, 0],
        [0, 9, 0, 0, 0, 0, 4, 0, 0],
    ];

    let _h_end = [
        [8, 1, 6, 2, 5, 1, 9, 4, 3],
        [2, 1, 3, 6, 8, 1, 1, 8, 7],
        [1, 7, 4, 3, 9, 1, 2, 4, 5],
        [3, 5, 2, 2, 2, 7, 1, 2, 4],
        [9, 8, 2, 2, 4, 5, 7, 2, 1],
        [4, 2, 7, 1, 2, 2, 5, 3, 6],
        [5, 2, 1, 9, 2, 2, 3, 6, 8],
        [6, 6, 8, 5, 7, 4, 3, 1, 9],
        [3, 9, 5, 8, 1, 6, 4, 2, 7],
    ]; */

    /////////
    // 读取控制台的输出
    /* let mut input = String::new();

    io::stdin()
        .read_line(&mut input)
        .expect("Failed to read line");
    let trim_input = input.trim();
    if trim_input == "abc".to_string() {
        println!("结束");
        panic!();
    }
    if trim_input == "po".to_string() {
        sudoku_.print_po();
    }
    println!("穷举了{:?}次", test); */
    //////////
    /* println!("穷举了{:?}次", test); */

    println!("\n\n版本：0.0.2，好像你输入的数独有错的话，程序照样运行\n\n");

    loop {
        println!(
            "请输入你的数独\n数独例子：\n3....8..97..5...2...8.......46......2..1...3...38..4..8....7.5.....86.4.67...92.1\n“.”代表空"
        );

        // println!(
        //     "呐呐~ 杂鱼哥哥，这都不会啊，不会吧♡不会吧♡\n\n勉为其难帮你一下吧，输入的数独要长这样：\n\n3....8..97..5...2...8.......46......2..1...3...38..4..8....7.5.....86.4.67...92.1\n\n“.”的意思你肯定知道的吧，嘻嘻~"
        // );

        let mut input = String::new();
        let mut trim_input;
        loop {
            io::stdin()
                .read_line(&mut input)
                .expect("Failed to read line");
            trim_input = input.trim();
            if trim_input.len() == 81 {
                break;
            }

            // println!("呐~ 输入的数独字符长度不对哦，杂鱼哥哥连这点都搞不明白吗，嘻嘻~")
            println!("输入的数独字符长度不对哦")
        }
        execute!(&mut stdout(), Clear(ClearType::All)).unwrap();

        /* println!("\n{}", trim_input); */

        /* let mut sudoku = Sudoku::array_to_sudoku(_f); */

        /* let mut sudoku = Sudoku::string_to_sudoku(_f_str); */

        let mut sudoku = Sudoku::string_to_sudoku(trim_input.to_string());

        let start_time = Instant::now();

        sudoku.solve_sudoku();

        let elapsed_time = start_time.elapsed();
        //////////
        // 输出经过的时间
        println!("花了: {:?}", elapsed_time);

        // println!("呐呐♡ 才花了: {:?}", elapsed_time);

        // 或者以毫秒为单位输出
        println!("花了: {}s", elapsed_time.as_secs_f64());
        // println!(
        //     "杂鱼哥哥不会连“毫秒”“微秒”都看不懂吧，是：{}秒哦。嘻嘻♡\n\n",
        //     elapsed_time.as_secs_f64()
        // );

        // 读取控制台的输出
        let mut input = String::new();
        // println!(
        //     "呐~程序运行完毕，杂鱼哥哥不会还想继续挑战我吧~ 嘻嘻~\n\n杂鱼哥哥不会连Ctrl+c就能结束程序都不知道吧~\n\n如果杂鱼哥哥还想挑战我，就回车吧~ 嘻嘻~"
        // );
        println!("程序运行完毕，继续挑战我吧~ \n\nCtrl+c结束程序\n\n还想挑战我，就回车吧~ ");

        io::stdin()
            .read_line(&mut input)
            .expect("Failed to read line");
        execute!(&mut stdout(), Clear(ClearType::All)).unwrap();
    }
}
